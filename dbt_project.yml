
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_dbt_snow_project'
version: '1.0.0'
config-version: 2

# add variables
vars:
  current_champion: Lakers


# This setting configures which "profile" dbt uses for this project.
profile: 'snowflake_db'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# config run hooks (without and with macro)
# on-run-start: "insert into default_db.public.dbt_audits(audit_type) values ('run_start'); commit;"
# on-run-end: "insert into default_db.public.dbt_audits(audit_type) values ('run_end'); commit;"
on-run-start: "{{ insert_audits('run_start') }}"
on-run-end: "{{ insert_audits('run_end') }}"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:

  # config model hooks (without and with macro)
  # pre-hook: "insert into default_db.public.dbt_audits(audit_type) values ('model_start'); commit;"
  # post-hook: "insert into default_db.public.dbt_audits(audit_type) values ('model_end'); commit;"
  pre-hook: "{{ insert_audits('model_start') }}"
  post-hook: "{{ insert_audits('model_end') }}"

  my_dbt_snow_project:
    # Config indicated by + and applies to all files under models/staging/
    staging:
      +materialized: view
      # by default is concatenated to PUBLIC_staging, use macro to override it
      +schema: staging 
      example:
        +materialized: table

    # directory specific configuration to apply on all models within it
    # marts:
    #   warehouse:
    #     +schema: warehouse # subdirectories can be given additional configurations
    #   reporting:
    #     +schema: reporting # subdirectory additional configuration
